---
title: Documentación Let's Talk API

language_tabs: # must be one of https://git.io/vQNgJ
  - shell

toc_footers:
  # - <a href='#'>Sign Up for a Developer Key</a>
  - <a href='https://github.com/lord/slate'>Documentation Powered by Slate</a>

includes:
  # - errors
  - tokens
  - conversations
  - messages

search: true
---

# Introducción

Bienvenido a la *API* Web de Let's Talk. Puedes usar nuestra **API** para interactuar con las conversaciones, mensajes, usuarios y varios recursos más relacionados una conversación de chat.

Por el momento tenemos ejemplos de código con `shell` y `curl`. Puedes verlos en el área oscura a la derecha.

# Autenticación

> Para autorizar una **request** puedes utilizar el siguiente código:


```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here"
  -H "Authorization: Basic $(echo -n 'raw_api_key:X' | base64)"
```

> Asegúrate de reemplazar `raw_api_key` con tu *API Key*.

Let's Talk utiliza *API Keys* para la autenticación. La *API* puede ser usada como  **usuario/cliente** o  **usuario/agente**

- **usuario/agente**: Usuario que se encarga de atender las conversaciones por el lado de la organización.
- **usuario/cliente**: Usuario que inicia una conversación desde algunos de los canales disponibles como el *widget* web o la aplicación móvil.

La formas de obtener una *API Key* depende del tipo de usuario que interectuará con la API:

- **usuario/agente**: Solicitar una *API Key* al correo [soporte@ltmessenger.com](mailto:soporte@ltmessenger.com)
- **usuario/cliente**: Solicitar un `consumer_key`, `consumer_token` y `organization_id` al correo [soporte@ltmessenger.com](mailto:soporte@ltmessenger.com) para utilizar el endpoint [Crear/obtener un cliente](#Crear/obtener un cliente) y obtener una API Key de **usuario/cliente**.

La *API Key* debe ser incluida en todas las peticiones a los *endpoints* autenticados como *header* según el protocolo [Basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication).

Cuando recibas la *API Key* es necesario codificarla en `base64` adicionando los caractéres `:X`.

El *header* se ve como lo siguiente:

`Authorization: encoded_api_key== `

<aside class="notice">
Debes reemplazar <code>encoded_api_key== </code> por tu <i>API Key</i>, con los caracteres <code>`:X`</code> concatenados al final y codificada en `base64`
</aside>

<!-- # Kittens

## Get All Kittens

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get()
```

```shell
curl "http://example.com/api/kittens"
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let kittens = api.kittens.get();
```

> The above command returns JSON structured like this:

```json
[
  {
    "id": 1,
    "name": "Fluffums",
    "breed": "calico",
    "fluffiness": 6,
    "cuteness": 7
  },
  {
    "id": 2,
    "name": "Max",
    "breed": "unknown",
    "fluffiness": 5,
    "cuteness": 10
  }
]
```

This endpoint retrieves all kittens.

### HTTP Request

`GET http://example.com/api/kittens`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
include_cats | false | If set to true, the result will also include cats.
available | true | If set to false, the result will include kittens that have already been adopted.

<aside class="success">
Remember — a happy kitten is an authenticated kitten!
</aside>

## Get a Specific Kitten

```

```shell
curl "http://example.com/api/kittens/2"
  -H "Authorization: meowmeowmeow"
```


> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "name": "Max",
  "breed": "unknown",
  "fluffiness": 5,
  "cuteness": 10
}
```

This endpoint retrieves a specific kitten.

<aside class="warning">Inside HTML code blocks like this one, you can't use Markdown, so use <code>&lt;code&gt;</code> blocks to denote code.</aside>

### HTTP Request

`GET http://example.com/kittens/<ID>`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the kitten to retrieve

## Delete a Specific Kitten


```shell
curl "http://example.com/api/kittens/2"
  -X DELETE
  -H "Authorization: meowmeowmeow"
```

> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "deleted" : ":("
}
```

This endpoint deletes a specific kitten.

### HTTP Request

`DELETE http://example.com/kittens/<ID>`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the kitten to delete -->

